<Project>

  <Import Project="$(MSBuildThisFileDirectory)Common.targets" Condition=" '$(CommonTargetsImported)' != 'true' " />

  <UsingTask TaskName="Sharpie" AssemblyFile="$(BindingExtBuildTasksAssembly)"/>
  <UsingTask TaskName="XcodeBuild" AssemblyFile="$(BindingExtBuildTasksAssembly)"/>
  <UsingTask TaskName="FixUpApiDefinitions" AssemblyFile="$(BindingExtBuildTasksAssembly)"/>

  <PropertyGroup>
    <XcodeProjectConfiguration Condition=" '$(XcodeProjectConfiguration)' == '' ">Release</XcodeProjectConfiguration>
    <XcodeBuildiOS Condition=" '$(XcodeBuildiOS)' == '' ">true</XcodeBuildiOS>
    <XcodeBuildiOSSimulator Condition=" '$(XcodeBuildiOSSimulator)' == '' ">true</XcodeBuildiOSSimulator>
    <XcodeBuildMacCatalyst Condition=" '$(XcodeBuildMacCatalyst)' == '' ">true</XcodeBuildMacCatalyst>
    <EnableDefaultSharpieiOSItems Condition=" '$(EnableDefaultSharpieiOSItems)' == '' ">false</EnableDefaultSharpieiOSItems>

    <_XcArchiveExtraArgs>$(_XcArchiveExtraArgs) ENABLE_BITCODE=NO SKIP_INSTALL=NO SWIFT_INSTALL_OBJC_HEADER=YES BUILD_LIBRARY_FOR_DISTRIBUTION=YES</_XcArchiveExtraArgs>
    <_XcArchiveExtraArgs>$(_XcArchiveExtraArgs) OTHER_LDFLAGS=&quot;-ObjC&quot; OTHER_SWIFT_FLAGS=&quot;-no-verify-emitted-module-interface&quot; OBJC_CFLAGS=&quot;-fno-objc-msgsend-selector-stubs -ObjC&quot;</_XcArchiveExtraArgs>
  </PropertyGroup>

  <PropertyGroup Condition="$(TargetFramework.Contains('ios')) Or $(TargetFramework.Contains('maccatalyst'))">
    <_GenerateBindingsDependsOn>
      _BuildXcodeProjects;
      _SharpieBindXcodeProjects;
      _SharpieIncludeApiDefinitions;
      $(_GenerateBindingsDependsOn);
    </_GenerateBindingsDependsOn>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <XcodeProjectReference>
      <Kind>Framework</Kind>
      <SmartLink>true</SmartLink>
    </XcodeProjectReference>
  </ItemDefinitionGroup>

  <!-- TODO Fix incremental builds -->
  <Target Name="_GetBuildXcodeProjectsInputs">
    <ItemGroup>
      <_XcbInputs Include="@(XcodeProjectReference->'%(RootDir)%(Directory)**/*.swift')" />
      <_XcbInputs Include="@(XcodeProjectReference->'%(RootDir)%(Directory)**/*.h')" />
      <_XcbInputs Include="@(XcodeProjectReference->'%(RootDir)%(Directory)**/*.pbxproj')" />
      <_XcbInputs Include="@(XcodeProjectReference->'%(RootDir)%(Directory)**/*.xcworkspace')"/>
      <_XcbInputs Remove="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/**/*')" />
    </ItemGroup>
  </Target>

  <Target Name="_BuildXcodeProjects"
      Condition=" '@(XcodeProjectReference->Count())' != '0' "
      DependsOnTargets="_EnsureBuildTasksAssembly;_GetBuildXcodeProjectsInputs;$(BuildXcodeProjectsDependsOnTargets)"
      Inputs="@(_XcbInputs)"
      Outputs="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName).xcframework/Info.plist')" >

    <!-- Create xcarchive files for configured platforms -->
    <XcodeBuild Condition=" '$(XcodeBuildiOS)' == 'true' "
        Arguments="-project &quot;%(XcodeProjectReference.FullPath)&quot; archive -scheme %(SchemeName) -configuration $(XcodeProjectConfiguration) -archivePath &quot;@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName)-ios.xcarchive')&quot; -destination &quot;generic/platform=iOS&quot; $(_XcArchiveExtraArgs)"
        WorkingDirectory="%(XcodeProjectReference.RootDir)%(XcodeProjectReference.Directory)" >
    </XcodeBuild>

    <XcodeBuild Condition=" '$(XcodeBuildiOSSimulator)' == 'true' "
        Arguments="-project &quot;%(XcodeProjectReference.FullPath)&quot; archive -scheme %(SchemeName) -configuration $(XcodeProjectConfiguration) -archivePath &quot;@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName)-iossimulator.xcarchive')&quot; -destination &quot;generic/platform=iOS Simulator&quot; $(_XcArchiveExtraArgs)"
        WorkingDirectory="%(XcodeProjectReference.RootDir)%(XcodeProjectReference.Directory)" >
    </XcodeBuild>

    <XcodeBuild Condition=" '$(XcodeBuildMacCatalyst)' == 'true' "
        Arguments="-project &quot;%(XcodeProjectReference.FullPath)&quot; archive -scheme %(SchemeName) -configuration $(XcodeProjectConfiguration) -archivePath &quot;@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName)-maccatalyst.xcarchive')&quot; -destination &quot;generic/platform=macOS,variant=Mac Catalyst&quot; $(_XcArchiveExtraArgs)"
        WorkingDirectory="%(XcodeProjectReference.RootDir)%(XcodeProjectReference.Directory)" >
    </XcodeBuild>

    <!-- Create xcframework file from xcarchive files -->
    <ItemGroup>
      <_CreateXcFxArgs Include="-create-xcframework" />
      <_CreateXcFxArgs Condition=" '$(XcodeBuildiOS)' == 'true' "           Include="@(XcodeProjectReference->'-archive %(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName)-ios.xcarchive')" />
      <_CreateXcFxArgs Condition=" '$(XcodeBuildiOS)' == 'true' "           Include="-framework %(XcodeProjectReference.SchemeName).framework" />
      <_CreateXcFxArgs Condition=" '$(XcodeBuildiOSSimulator)' == 'true' "  Include="@(XcodeProjectReference->'-archive %(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName)-iossimulator.xcarchive')" />
      <_CreateXcFxArgs Condition=" '$(XcodeBuildiOSSimulator)' == 'true' "  Include="-framework %(XcodeProjectReference.SchemeName).framework" />
      <_CreateXcFxArgs Condition=" '$(XcodeBuildMacCatalyst)' == 'true' "   Include="@(XcodeProjectReference->'-archive %(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName)-maccatalyst.xcarchive')" />
      <_CreateXcFxArgs Condition=" '$(XcodeBuildMacCatalyst)' == 'true' "   Include="-framework %(XcodeProjectReference.SchemeName).framework" />
      <_CreateXcFxArgs Include="@(XcodeProjectReference->'-output %(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName).xcframework')" />
    </ItemGroup>

    <RemoveDir Directories="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName).xcframework')" />

    <XcodeBuild Arguments="@(_CreateXcFxArgs, ' ')"
        WorkingDirectory="%(XcodeProjectReference.RootDir)%(XcodeProjectReference.Directory)" >
    </XcodeBuild>

    <ItemGroup>
      <NativeReference Include="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName).xcframework')">
        <Kind>%(XcodeProjectReference.Kind)</Kind>
        <SmartLink>%(XcodeProjectReference.SmartLink)</SmartLink>
      </NativeReference>
    </ItemGroup>

    <Error Condition=" !Exists('@(NativeReference)') " Text="Xcode project built successfully but did not produce expected output file: '@(NativeReference)'" />
    <Message Text="Adding reference to Xcode project output: @(NativeReference)" />
  </Target>


  <Target Name="_GetSharpieBindInputs">
    <ItemGroup>
      <_SharpieInputs Include="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName)-ios.xcarchive/Products/Library/Frameworks/%(SchemeName).framework')" />
    </ItemGroup>
  </Target>

  <Target Name="_SharpieBindXcodeProjects"
      Condition=" '@(XcodeProjectReference->Count())' != '0' and '@(XcodeProjectReference->'%(SharpieBind)')' == 'true' "
      DependsOnTargets="_GetSharpieBindInputs"
      Inputs="@(_SharpieInputs)"
      Outputs="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/sharpie/ApiDefinitions.cs')">

    <ItemGroup>
      <_ObjSharpieArgs Include="@(XcodeProjectReference->'--output=%(RootDir)%(Directory)%(SchemeName)/build/sharpie')" />
      <_ObjSharpieArgs Include="--namespace=%(XcodeProjectReference.SharpieNamespace)" />
      <_ObjSharpieArgs Include="@(XcodeProjectReference->'--framework %(RootDir)%(Directory)%(SchemeName)/build/%(SchemeName)-ios.xcarchive/Products/Library/Frameworks/%(SchemeName).framework')" />
    </ItemGroup>

    <Sharpie Arguments="bind @(_ObjSharpieArgs, ' ')" />
  </Target>

  <Target Name="_SharpieIncludeApiDefinitions"
      Condition=" '@(XcodeProjectReference->Count())' != '0' and '@(XcodeProjectReference->'%(SharpieBind)')' == 'true' and '$(EnableDefaultSharpieiOSItems)' == 'true' "
      Inputs="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/sharpie/ApiDefinitions.cs')"
      Outputs="$(IntermediateOutputPath)sharpie/SharpieIncludeApiDefinitions.stamp" >

    <!-- Fix up and optionally include generated ApiDefinitions.cs -->
    <!-- TODO improve design time build / intellisense -->
    <!--Copy
        SourceFiles="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/sharpie/ApiDefinitions.cs')"
        DestinationFiles="@(XcodeProjectReference->'$(IntermediateOutputPath)sharpie/%(SchemeName)/ApiDefinitions.in.cs')"
        SkipUnchangedFiles="true"
    /-->
    <FixUpApiDefinitions
        ApiDefinitionsFiles="@(XcodeProjectReference->'%(RootDir)%(Directory)%(SchemeName)/build/sharpie/ApiDefinitions.cs')"
        IntermediateOutputPath="$(IntermediateOutputPath)" >
      <Output TaskParameter="UpdatedApiDefinitionsFiles" ItemName="_GeneratedApiDefinitionsFiles" />
    </FixUpApiDefinitions>

    <Touch Files="$(IntermediateOutputPath)sharpie/SharpieIncludeApiDefinitions.stamp" AlwaysCreate="true" />

    <ItemGroup>
      <ObjcBindingApiDefinition Include="@(_GeneratedApiDefinitionsFiles)" />
      <FileWrites Include="@(_GeneratedApiDefinitionsFiles)"/>
      <FileWrites Include="$(IntermediateOutputPath)sharpie/SharpieIncludeApiDefinitions.stamp"/>
    </ItemGroup>
  </Target>

</Project>
